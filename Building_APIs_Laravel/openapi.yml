openapi: 3.0.3
info:
  title: Building APIs - Laravel
  description: |-
    End point for the Building APIs - Laravel task
    
  contact:
    email: logan.orr@tuffing.co.nz
  version: 0.0.1
servers:
  - url: https://laravel.tuffing.co.nz/api/
tags:
  - name: users
    description: Operations about users
  - name: orders
    description: Products from our ecommerce application
  - name: products
    description: Products from our ecommerce application
paths:
  /products:
    get:
      tags:
        - products
      summary: Get a list of all product details in our application
      description: Get a list of products
      operationId: getProducts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product' 
      security:
        - application_auth:
            - read:products
  /orders:
    post:
      tags:
        - orders
      summary: Post a new order
      description: ''      
      operationId: addOrder
      requestBody:
        description: Create an order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - application_auth:
            - read:own_orders 
            - write:orders
      
  /users/{user_id}:
    delete:
      tags:
        - users
      summary: Delete user
      description: Delete a user. 
      operationId: deleteUserById
      parameters:
        - name: user_id
          in: path
          description: The id of the user that needs to be Deleted.
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - application_auth:
            - delete:user 
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: 'The id of the user that needs to be fetched. Use 1 for testing. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found or you do not have permission to see this user
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Product 1
        description:
          type: string
          example: Product description
        price:
          type: number
          example: 12.34
        created_at:
          type: string
          description: Date time this user was created
          format: date-time
          example: 2022-07-04T10:29:45Z
        updated_at:
          type: string
          description: Date time this user was updated
          format: date-time
          example: 2022-07-04T10:29:45Z
    Order:
      type: object
      properties:
        billing_name: 
          type: string
          example: Test User
        billing_address:
          type: string
          example: 123 street, Country
        products:
          type: array
          items:
            $ref: "#/components/schemas/OrderedProduct"
    OrderedProduct:
      type: object
      properties:
        product_id:
          type: integer
          example: 123
        quantity:
          type: integer
          example: 12
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Test Name
        email:
          type: string
          example: test_name@email.com
        bio:
          type: string
          example: 'Backend Web Developer'
        url:
          type: string
          example: 'https://website.com'
        created_at:
          type: string
          description: Date time this user was created
          format: date-time
          example: 2022-07-04T10:29:45Z
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    ProductArray:
      description: A list of product objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
        application/xml:
          schema:
            $ref: '#/components/schemas/Product'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    application_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://laravel.tuffing.co.nz/oauth/authorize
          scopes:
            read:own_orders: see your own orders
            write:orders: write new orders to the system
            read:products: read your posts
            delete:users: delete users
    api_key:
      type: apiKey
      name: api_key
      in: header